syntax = "proto3";

import "common.proto";

package base;

/// Signal publish, subscribe and read.
service NetworkService {
  /// Subscribe to signals.
  rpc SubscribeToSignals (SubscriberConfig) returns (stream Signals) {}
  /// Subscribe to signals with mapping. Not released yet for general availability. Available in limited environments.
  rpc SubscribeToSignalsWithMapping (SubscriberWithMappingConfig) returns (stream Signals) {}
  /// Publish signals with values.
  rpc PublishSignals (PublisherConfig) returns (Empty) {}
  /// Read signals from cache.
  rpc ReadSignals (SignalIds) returns (Signals) {}
}

/// Parameters for subscription.
message SubscriberConfig {
  /**
   * Identifier of subscriber, typically your app identifier. Published signals
   * with same identifier will not trigger callback.
   */
  /// Identifier for subscription, will not receive subscriptions.
  ClientId clientId = 1;
  /// List of signals in subscription.
  SignalIds signals = 2;
  /// Only trigger callback when value changes when set to true.
  bool onChange = 3;
}

message SubscriberWithMappingConfig {
  /**
   * Identifier of subscriber, typically your app identifier. Published signals
   * with same identifier will not trigger callback.
   */
  /// Identifier for subscription, will not receive subscriptions.
  ClientId clientId = 1;
  /// Custom Lua mapping code
  string mappingCode = 2;
  /// Only trigger callback when value changes when set to true.
  bool onChange = 3;
}

/// List of signal identifiers
message SignalIds {
  repeated SignalId signalId = 1;   /// List of signal identifiers.
}

/// Signals with values
message Signals {
  repeated Signal signal = 1; /// List of signals with values.
}

/// Parameters for publishing values.
message PublisherConfig {
  Signals signals = 1;      /// Signals with values.
  /**
   * Identifier of publisher, typically your app identifier.
   * Subscribers with same identifier will not trigger callback.
   */
  ClientId clientId = 2;
  /// Specify frequency of publication. Specify 0 to only publish once.
  int32 frequency = 3;
}

/// Signal with value.
message Signal {
  SignalId id = 1;          /// Identifier of signal to publish.
  /// Value signal. Union of supported data types.
  oneof payload {
    int64 integer = 2;      /// Value with integer type (int64).
    double double = 3;      /// Floating point data type (double).
    bool arbitration = 4;   /// Exclusive for LIN bus, present as true when a header is presented on the bus.
    bool empty = 6;         /// No data supplied.
  }
  bytes raw = 5;            /// Binary data of value, relevant for Frames.
  int64 timestamp = 7;      /// time stamp in micro seconds, set when first seen.
}
