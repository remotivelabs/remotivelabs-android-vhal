syntax = "proto3";

import "common.proto";
import "google/api/annotations.proto";

package base;

/// Signal publish, subscribe and read.
service NetworkService {
  /// Subscribe to signals.
  rpc SubscribeToSignals (SubscriberConfig) returns (stream Signals) {
    option (google.api.http) = {
      post: "/v1/SubscribeToSignals/"
      body: "*"
    };
  }
  /// Subscribe to signals with transform provided as a LUA script.
  rpc SubscribeToSignalWithScript (SubscriberWithScriptConfig) returns (stream Signals) {
    option (google.api.http) = {
      post: "/v1/SubscribeToSignalWithScript/"
      body: "*"
    };
  }
  /// A stream which emits frames distributions of a provided namespace. Useful for diagnostic purposes. Counts are reset every 500 ms.
  rpc SubscribeToFramesDistribution (FramesDistributionConfig) returns (stream FramesDistribution) {
    option (google.api.http) = {
      post: "/v1/SubscribeToFramesDistribution/"
      body: "*"
    };
  }
  /// Publish signals with values.
  rpc PublishSignals (PublisherConfig) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/PublishSignals/"
      body: "*"
    };
  }
  /// Read signals from cache.
  rpc ReadSignals (SignalIds) returns (Signals) {}
}

/// Parameters for subscription.
message SubscriberConfig {
  /**
   * Identifier of subscriber, typically your app identifier. Published signals
   * with same identifier will not trigger callback.
   */
  ClientId clientId = 1;
  /// List of signals in subscription.
  SignalIds signals = 2;
  /// Only trigger callback when value changes when set to true.
  bool onChange = 3;
  /// Will trigger an initial empty response once the subscription is ready
  bool initialEmpty = 4;
}

message SubscriberWithScriptConfig {
  /**
   * Identifier of subscriber, typically your app identifier. Published signals
   * with same identifier will not trigger callback.
   */
  ClientId clientId = 1;
  /// Custom Lua mapping code
  bytes script = 2;
  /// Only trigger callback when value changes when set to true.
  bool onChange = 3;
}

message FramesDistributionConfig {
  /// Name of the namespace from which we wish to subscribe to frames distributions.
  NameSpace namespace = 1;
}

message CountByFrameId {
  uint32 frameId = 1;
  uint64 count = 2;
}

message FramesDistribution {
  repeated CountByFrameId countsByFrameId = 1;
}

/// List of signal identifiers
message SignalIds {
  repeated SignalId signalId = 1;   /// List of signal identifiers.
}

/// Signals with values
message Signals {
  repeated Signal signal = 1; /// List of signals with values.
}

/// Parameters for publishing values.
message PublisherConfig {
  Signals signals = 1;      /// Signals with values.
  ClientId clientId = 2;
  /// Specify frequency of publication. Specify 0 to only publish once.
  int32 frequency = 3;
}

/// Signal with value.
message Signal {
  SignalId id = 1;          /// Identifier of signal to publish.
  /// Value signal. Union of supported data types.
  oneof payload {
    int64 integer = 2;      /// Value with integer type (int64).
    double double = 3;      /// Floating point data type (double).
    bool arbitration = 4;   /// Exclusive for LIN bus, present as true when a header is presented on the bus.
    bool empty = 6;         /// No data supplied.
    /// (Supports publishing signals with named values or raw signals.
    /// - If the signal has named values, the provided value must exactly match a defined name (case-sensitive).
    /// - For raw signals, the provided value can be any string.)
    string strValue = 8;
  }
  bytes raw = 5;            /// Binary data of value, relevant for Frames.
  int64 timestamp = 7;      /// time stamp in micro seconds, set when first seen.
}
