syntax = "proto3";

import "common.proto";

package base;

/// Handle configuration of the RemotiveBroker server.
service SystemService {
    /// Get current configuration of server.
    rpc GetConfiguration (Empty) returns (Configuration) {}
    /// Get list of all available frames and signals on server.
    rpc ListSignals (NameSpace) returns (Frames) {}

    /**
     * Upload file using chunks (without streams), specifically useful for
     * gRPC-web which does not support Client-side streaming.
     */
    rpc UploadFileChunk (FileUploadChunkRequest) returns (FileUploadResponse) {}

    /**
     * Upload file using streams, preferred option for client with Client-side
     * streaming.
     */
    rpc UploadFile (stream FileUploadRequest) returns (FileUploadResponse) {}

    /// Delete a single or multiple files from server.
    rpc BatchDeleteFiles (FileDescriptions) returns (Empty) {}

    /// Download a single or multiple files from server.
    rpc BatchDownloadFiles (FileDescriptions) returns (stream FileDownloadResponse) {}
    rpc BatchDownloadFileChunks (BatchDownloadFileChunksRequest) returns (BatchDownloadFileChunksResponse) {}

    /**
     * Will not return until new configuration is tested an active, make sure
     * to set timeout to a large value. (fibex on pi > 50s).
     */
    rpc ReloadConfiguration (Empty) returns (ReloadMessage) {}

    /// Get information about server license.
    rpc GetLicenseInfo (Empty) returns (LicenseInfo) {}

    /// Set server license.
    rpc SetLicense (License) returns (LicenseInfo) {}
}

/// Configuration of server.
message Configuration {
    /// Network information.
    repeated NetworkInfo networkInfo = 1;
    /// Server configuration file `interfaces.json`.
    bytes interfacesJson = 2;
    /// IP address of server.
    string publicAddress = 4;
    /// Version of RemotiveBroker.
    string serverVersion = 5;
    /// Contains configuration file deprecation warnings, validation errors and similar
    string interfacesInfo = 6;
}

/// Response from reload request.
message ReloadMessage {
    /// Status of reload operation.
    oneof status {
        /// New configuration from successfully reload operation.
        Configuration configuration = 1;
        /// Response from failed reload operation.
        string errorMessage = 2;
    }
}

/// File information.
message FileDescription {
    string sha256 = 1;      /// File checksum.
    string path = 2;        /// File (path and filename) on server.
}

message FileDescriptions {
  repeated FileDescription fileDescriptions = 1;
}

/**
 * Parameters for a file upload.
 * SHA256 which is part of FileDescription only needs to be submitted in the
 * last chunk.
 */
message FileUploadRequest {
    /// Data for upload.
    oneof data {
      FileDescription fileDescription = 1;      /// Information about file to upload.
      bytes chunk = 2;                          /// Amount of chunks that will be sent for this file.
    }
}

/**
 * Request for file chunk upload.
 * Divide file in chunks of n bytes, where recommend n is 500000 bytes.
 * SHA256 which is part of FileDescription only needs to be submitted in the
 * last chunk.
 */
message FileUploadChunkRequest {
    FileDescription fileDescription = 1;        /// What file this chunk is for.
    uint32 chunks = 2;                          /// Amount of chunks.
    uint32 chunkId = 3;                         /// Index of this chunk. Start with 0.
    bytes chunk = 4;                            /// Chunk data.
    bool cancelUpload = 5;                      /// Cancel upload request.
    uint32 uploadTimeout = 6;                   /// Server side timeout (ms) for uploading all chunks which represents full file.
}

/// Response from file or file chunk upload.
message FileUploadResponse {
    /// Result from upload.
    oneof data {
        bool finished = 1;          /// Upload completed.
        bool cancelled = 2;         /// Upload canceled.
        string errorMessage = 3;    /// Error with reason.
    };
}

/// Response from file download request.
message FileDownloadResponse {
    /// Result.
    oneof data {
        bytes chunk = 1;            /// File content.
        string errorMessage = 2;    /// Error with reason.
    };
}

message BatchDownloadFileChunksRequest {
  repeated FileDescription fileDescriptions = 1;
  uint32 timeout = 6;            /// Server-side timeout (in milliseconds) for downloading a chunk. The timeout is for each chunk, not the entire file. If the timeout is exceeded, the server will cancel the download and return an error.
}

message BatchDownloadFileChunksResponse {
  bool lastChunk = 2;                         /// Amount of chunks.
  uint32 chunkId = 3;                         /// Index of this chunk. Start with 0.
  bytes chunk = 4;                            /// Chunk data.
  uint32 estimatedTotalSize = 5;              /// Estimated total size in bytes.
}

/// Type for license status.
enum LicenseStatus {
  UNSET = 0;                /// No license.
  VALID = 1;                /// Valid license.
  EXPIRED = 2;              /// Expired.
  BADDATE = 3;              /// Error, incorrect date.
  WRONGMACHINE = 4;         /// Error, license not for this machine.
  INCOMPLETEJSON = 5;       /// Error, Incomplete license file.
  INVALIDJSON = 6;          /// Error, Incomplete license json file.
  BADSIGNATURE = 7;         /// Error, Bad signature on license file.
  MALFORMED = 8;            /// Error, reading license file.
  SERVERERROR = 9;          /// Error, server side.
  NOTERMSAGREEMENT = 10;    /// Error, user has not accepted terms.
}

/// Server license information.
message LicenseInfo {
  LicenseStatus status = 1;         /// Status of license.
  bytes json = 2;                   /// Verbatim json from the license data if BASE64-decodable.
  string expires = 3;               /// Extracted from json for convenience.
  string requestId = 4;             /// Info to use when requesting a new license.
  bytes requestMachineId = 5;       /// Identifier for machine running server.
}

/// License data.
message License {
  bytes data = 1;                   /// Content of license.
  bool termsAgreement = 2;          /// Check if user accepted user agreement.
}
